
Lab8_dz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  0080006a  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f9  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058c  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000304  00000000  00000000  00000fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000335  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000129  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 37       	cpi	r26, 0x72	; 114
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	70 d0       	rcall	.+224    	; 0x13a <main>
  5a:	d4 c0       	rjmp	.+424    	; 0x204 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <chislo>:
unsigned char digits [10] = {
	0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x7, 0x7F, 0x6F
};

void chislo (unsigned int chislo_all)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ac 01       	movw	r20, r24
	r0_1000 = chislo_all/1000;          //tisiachi
  64:	ec 01       	movw	r28, r24
  66:	d6 95       	lsr	r29
  68:	c7 95       	ror	r28
  6a:	d6 95       	lsr	r29
  6c:	c7 95       	ror	r28
  6e:	d6 95       	lsr	r29
  70:	c7 95       	ror	r28
  72:	9e 01       	movw	r18, r28
  74:	a5 ec       	ldi	r26, 0xC5	; 197
  76:	b0 e2       	ldi	r27, 0x20	; 32
  78:	b9 d0       	rcall	.+370    	; 0x1ec <__umulhisi3>
  7a:	fc 01       	movw	r30, r24
  7c:	f2 95       	swap	r31
  7e:	e2 95       	swap	r30
  80:	ef 70       	andi	r30, 0x0F	; 15
  82:	ef 27       	eor	r30, r31
  84:	ff 70       	andi	r31, 0x0F	; 15
  86:	ef 27       	eor	r30, r31
  88:	f0 93 71 00 	sts	0x0071, r31	; 0x800071 <r0_1000+0x1>
  8c:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <r0_1000>
	r1_100 = chislo_all%1000/100;       //sotni
  90:	28 ee       	ldi	r18, 0xE8	; 232
  92:	33 e0       	ldi	r19, 0x03	; 3
  94:	e2 9f       	mul	r30, r18
  96:	c0 01       	movw	r24, r0
  98:	e3 9f       	mul	r30, r19
  9a:	90 0d       	add	r25, r0
  9c:	f2 9f       	mul	r31, r18
  9e:	90 0d       	add	r25, r0
  a0:	11 24       	eor	r1, r1
  a2:	9a 01       	movw	r18, r20
  a4:	28 1b       	sub	r18, r24
  a6:	39 0b       	sbc	r19, r25
  a8:	36 95       	lsr	r19
  aa:	27 95       	ror	r18
  ac:	36 95       	lsr	r19
  ae:	27 95       	ror	r18
  b0:	ab e7       	ldi	r26, 0x7B	; 123
  b2:	b4 e1       	ldi	r27, 0x14	; 20
  b4:	9b d0       	rcall	.+310    	; 0x1ec <__umulhisi3>
  b6:	96 95       	lsr	r25
  b8:	87 95       	ror	r24
  ba:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <r1_100+0x1>
  be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <r1_100>
	r2_10 = chislo_all%100/10;    // desiatki
  c2:	9a 01       	movw	r18, r20
  c4:	36 95       	lsr	r19
  c6:	27 95       	ror	r18
  c8:	36 95       	lsr	r19
  ca:	27 95       	ror	r18
  cc:	8f d0       	rcall	.+286    	; 0x1ec <__umulhisi3>
  ce:	9c 01       	movw	r18, r24
  d0:	36 95       	lsr	r19
  d2:	27 95       	ror	r18
  d4:	64 e6       	ldi	r22, 0x64	; 100
  d6:	62 9f       	mul	r22, r18
  d8:	c0 01       	movw	r24, r0
  da:	63 9f       	mul	r22, r19
  dc:	90 0d       	add	r25, r0
  de:	11 24       	eor	r1, r1
  e0:	9a 01       	movw	r18, r20
  e2:	28 1b       	sub	r18, r24
  e4:	39 0b       	sbc	r19, r25
  e6:	ad ec       	ldi	r26, 0xCD	; 205
  e8:	bc ec       	ldi	r27, 0xCC	; 204
  ea:	80 d0       	rcall	.+256    	; 0x1ec <__umulhisi3>
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
  f8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <r2_10+0x1>
  fc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <r2_10>
	r3_1 = chislo_all%10;        //edinici
 100:	9a 01       	movw	r18, r20
 102:	74 d0       	rcall	.+232    	; 0x1ec <__umulhisi3>
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	9c 01       	movw	r18, r24
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	9a 01       	movw	r18, r20
 128:	28 1b       	sub	r18, r24
 12a:	39 0b       	sbc	r19, r25
 12c:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <__data_end+0x1>
 130:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <main>:


int main(void)
{
	DDRD = 0xff;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	81 bb       	out	0x11, r24	; 17
	//PORTD = digits[1];
	DDRB |=(1<<3) | (1<<2) | (1<<1) | (1<<0);
 13e:	87 b3       	in	r24, 0x17	; 23
 140:	8f 60       	ori	r24, 0x0F	; 15
 142:	87 bb       	out	0x17, r24	; 23
	
	while (1)
	{
		chislo(2024);
 144:	88 ee       	ldi	r24, 0xE8	; 232
 146:	97 e0       	ldi	r25, 0x07	; 7
 148:	8a df       	rcall	.-236    	; 0x5e <chislo>
		PORTB |= (1<<1) | (1<<2) | (1<<3);
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8e 60       	ori	r24, 0x0E	; 14
 14e:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1<<0);               //0
 150:	88 b3       	in	r24, 0x18	; 24
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	88 bb       	out	0x18, r24	; 24
		PORTD = digits[r0_1000];
 156:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <r0_1000>
 15a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <r0_1000+0x1>
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	80 81       	ld	r24, Z
 164:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8d ee       	ldi	r24, 0xED	; 237
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x30>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x36>
 170:	00 00       	nop
		
		_delay_ms(3);
		PORTB |= (1<<2) | (1<<0) | (1<<3);
 172:	88 b3       	in	r24, 0x18	; 24
 174:	8d 60       	ori	r24, 0x0D	; 13
 176:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1<<1);               //1
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	8d 7f       	andi	r24, 0xFD	; 253
 17c:	88 bb       	out	0x18, r24	; 24
		PORTD = digits[r1_100];
 17e:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <r1_100>
 182:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <r1_100+0x1>
 186:	e0 5a       	subi	r30, 0xA0	; 160
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 81       	ld	r24, Z
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	8d ee       	ldi	r24, 0xED	; 237
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x58>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x5e>
 198:	00 00       	nop
		
		_delay_ms(3);
		PORTB |= (1<<1) | (1<<0) | (1<<3);
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	8b 60       	ori	r24, 0x0B	; 11
 19e:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1<<2);              //2
 1a0:	88 b3       	in	r24, 0x18	; 24
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	88 bb       	out	0x18, r24	; 24
		PORTD = digits[r2_10];
 1a6:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <r2_10>
 1aa:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <r2_10+0x1>
 1ae:	e0 5a       	subi	r30, 0xA0	; 160
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 81       	ld	r24, Z
 1b4:	82 bb       	out	0x12, r24	; 18
 1b6:	8d ee       	ldi	r24, 0xED	; 237
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x80>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x86>
 1c0:	00 00       	nop
		
		_delay_ms(3);
		PORTB |= (1<<1) | (1<<0) | (1<<2);
 1c2:	88 b3       	in	r24, 0x18	; 24
 1c4:	87 60       	ori	r24, 0x07	; 7
 1c6:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1<<3);               //3
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	87 7f       	andi	r24, 0xF7	; 247
 1cc:	88 bb       	out	0x18, r24	; 24
		PORTD = digits[r3_1];
 1ce:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 1d2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	80 81       	ld	r24, Z
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	8d ee       	ldi	r24, 0xED	; 237
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0xa8>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xae>
 1e8:	00 00       	nop
 1ea:	ac cf       	rjmp	.-168    	; 0x144 <main+0xa>

000001ec <__umulhisi3>:
 1ec:	a2 9f       	mul	r26, r18
 1ee:	b0 01       	movw	r22, r0
 1f0:	b3 9f       	mul	r27, r19
 1f2:	c0 01       	movw	r24, r0
 1f4:	a3 9f       	mul	r26, r19
 1f6:	01 d0       	rcall	.+2      	; 0x1fa <__umulhisi3+0xe>
 1f8:	b2 9f       	mul	r27, r18
 1fa:	70 0d       	add	r23, r0
 1fc:	81 1d       	adc	r24, r1
 1fe:	11 24       	eor	r1, r1
 200:	91 1d       	adc	r25, r1
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
