
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000aa  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000613  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054f  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ba  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ea       	ldi	r30, 0xAA	; 170
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	2d c0       	rjmp	.+90     	; 0xa6 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
	0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x7, 0x7F, 0x6F
							};

int main(void)
{
    DDRD = 0b11111111;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
  52:	12 ba       	out	0x12, r1	; 18
	
	while (1) 
    {
		unsigned char ZX;
		for (ZX=0; ZX<=9; ZX++)        //--start--услови€ при котором выолн€етс€--что выполн€етс€ с переменной--
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	10 c0       	rjmp	.+32     	; 0x78 <main+0x2a>
		{
			PORTD = digits[ZX];   //***0...9*** 
  58:	e8 2f       	mov	r30, r24
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	e0 5a       	subi	r30, 0xA0	; 160
  5e:	ff 4f       	sbci	r31, 0xFF	; 255
  60:	90 81       	ld	r25, Z
  62:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	2f e9       	ldi	r18, 0x9F	; 159
  66:	36 e8       	ldi	r19, 0x86	; 134
  68:	91 e0       	ldi	r25, 0x01	; 1
  6a:	21 50       	subi	r18, 0x01	; 1
  6c:	30 40       	sbci	r19, 0x00	; 0
  6e:	90 40       	sbci	r25, 0x00	; 0
  70:	e1 f7       	brne	.-8      	; 0x6a <main+0x1c>
  72:	00 c0       	rjmp	.+0      	; 0x74 <main+0x26>
  74:	00 00       	nop
	PORTD = 0b00000000;
	
	while (1) 
    {
		unsigned char ZX;
		for (ZX=0; ZX<=9; ZX++)        //--start--услови€ при котором выолн€етс€--что выполн€етс€ с переменной--
  76:	8f 5f       	subi	r24, 0xFF	; 255
  78:	8a 30       	cpi	r24, 0x0A	; 10
  7a:	70 f3       	brcs	.-36     	; 0x58 <main+0xa>
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	10 c0       	rjmp	.+32     	; 0xa0 <main+0x52>
			PORTD = digits[ZX];   //***0...9*** 
		    _delay_ms(ZAD);
		}
		for (ZX=8; ZX>=1; ZX--)        //--start--услови€ при котором выолн€етс€--что выполн€етс€ с переменной--
		{
			PORTD = digits[ZX];   //***8...1*** no zaderjka 
  80:	e8 2f       	mov	r30, r24
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	e0 5a       	subi	r30, 0xA0	; 160
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	90 81       	ld	r25, Z
  8a:	92 bb       	out	0x12, r25	; 18
  8c:	2f e9       	ldi	r18, 0x9F	; 159
  8e:	36 e8       	ldi	r19, 0x86	; 134
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x44>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x4e>
  9c:	00 00       	nop
		for (ZX=0; ZX<=9; ZX++)        //--start--услови€ при котором выолн€етс€--что выполн€етс€ с переменной--
		{
			PORTD = digits[ZX];   //***0...9*** 
		    _delay_ms(ZAD);
		}
		for (ZX=8; ZX>=1; ZX--)        //--start--услови€ при котором выолн€етс€--что выполн€етс€ с переменной--
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	81 11       	cpse	r24, r1
  a2:	ee cf       	rjmp	.-36     	; 0x80 <main+0x32>
  a4:	d7 cf       	rjmp	.-82     	; 0x54 <main+0x6>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
