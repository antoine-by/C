
Lab_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000fe  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060e  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056c  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000294  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ef       	ldi	r30, 0xFE	; 254
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 36       	cpi	r26, 0x6C	; 108
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	4f c0       	rjmp	.+158    	; 0xfa <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
	0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x7, 0x7F, 0x6F
							};

int main(void)
{
    DDR_7_SEG = 0b11111111;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
	PORT_7_SEG = 0b00000000;
  62:	18 ba       	out	0x18, r1	; 24
	DDRD &=~((1<<2)|(1<<1));
  64:	81 b3       	in	r24, 0x11	; 17
  66:	89 7f       	andi	r24, 0xF9	; 249
  68:	81 bb       	out	0x11, r24	; 17
	PORTD |=(1<<2)|(1<<1);
  6a:	82 b3       	in	r24, 0x12	; 18
  6c:	86 60       	ori	r24, 0x06	; 6
  6e:	82 bb       	out	0x12, r24	; 18
	
	while (1) 
    {
		
		if (~PIND & (1<<1))
  70:	81 99       	sbic	0x10, 1	; 16
  72:	1f c0       	rjmp	.+62     	; 0xb2 <main+0x54>
		{
			ZX++;
  74:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  78:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
  82:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
			if (ZX>9) ZX=0;
  86:	0a 97       	sbiw	r24, 0x0a	; 10
  88:	24 f0       	brlt	.+8      	; 0x92 <main+0x34>
  8a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
  8e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
			PORT_7_SEG = digits[ZX];
  92:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
  96:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
  9a:	e0 5a       	subi	r30, 0xA0	; 160
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	80 81       	ld	r24, Z
  a0:	88 bb       	out	0x18, r24	; 24
			while (~PIND & (1<<1))	
  a2:	81 9b       	sbis	0x10, 1	; 16
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	93 ec       	ldi	r25, 0xC3	; 195
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x4c>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x52>
  b0:	00 00       	nop
			{
			}
			_delay_ms(200);
		}
		
		if (~PIND & (1<<2))
  b2:	82 99       	sbic	0x10, 2	; 16
  b4:	dd cf       	rjmp	.-70     	; 0x70 <main+0x12>
		{
			ZX--;
  b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  ba:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
  c4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
			if (ZX<0) ZX=9;
  c8:	99 23       	and	r25, r25
  ca:	34 f4       	brge	.+12     	; 0xd8 <main+0x7a>
  cc:	89 e0       	ldi	r24, 0x09	; 9
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
  d4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
			PORT_7_SEG = digits[ZX];
  d8:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
  dc:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
  e0:	e0 5a       	subi	r30, 0xA0	; 160
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	80 81       	ld	r24, Z
  e6:	88 bb       	out	0x18, r24	; 24
			while (~PIND & (1<<2))
  e8:	82 9b       	sbis	0x10, 2	; 16
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <main+0x8a>
  ec:	8f e4       	ldi	r24, 0x4F	; 79
  ee:	93 ec       	ldi	r25, 0xC3	; 195
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x92>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x98>
  f6:	00 00       	nop
  f8:	bb cf       	rjmp	.-138    	; 0x70 <main+0x12>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
