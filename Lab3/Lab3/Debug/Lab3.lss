
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ce  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051b  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000259  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000123f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define KNOPKAREAD PINB
#define LED PORTD

int main(void)
{
	DDRD = 0b00001111;
  38:	8f e0       	ldi	r24, 0x0F	; 15
  3a:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000000; 
  3c:	17 ba       	out	0x17, r1	; 23
	LED = 0b00001111;
  3e:	82 bb       	out	0x12, r24	; 18
	KNOPKA = 0b00000001;
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	88 bb       	out	0x18, r24	; 24
  44:	0f c0       	rjmp	.+30     	; 0x64 <__SREG__+0x25>
			LED = 0b00001001;
		}
    */
		while(KNOPKAREAD == 0b00000000)
		{
			LED = 0b00000110;
  46:	86 e0       	ldi	r24, 0x06	; 6
  48:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4a:	87 ea       	ldi	r24, 0xA7	; 167
  4c:	91 e6       	ldi	r25, 0x61	; 97
  4e:	01 97       	sbiw	r24, 0x01	; 1
  50:	f1 f7       	brne	.-4      	; 0x4e <__SREG__+0xf>
  52:	00 c0       	rjmp	.+0      	; 0x54 <__SREG__+0x15>
  54:	00 00       	nop
			_delay_ms(100);
			LED = 0b00000000;
  56:	12 ba       	out	0x12, r1	; 18
  58:	87 ea       	ldi	r24, 0xA7	; 167
  5a:	91 e6       	ldi	r25, 0x61	; 97
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
		else
		{
			LED = 0b00001001;
		}
    */
		while(KNOPKAREAD == 0b00000000)
  64:	86 b3       	in	r24, 0x16	; 22
  66:	88 23       	and	r24, r24
  68:	71 f3       	breq	.-36     	; 0x46 <__SREG__+0x7>
			LED = 0b00000110;
			_delay_ms(100);
			LED = 0b00000000;
			_delay_ms(100);
		}
		LED = 0b00001001;
  6a:	89 e0       	ldi	r24, 0x09	; 9
  6c:	82 bb       	out	0x12, r24	; 18
	}
  6e:	fa cf       	rjmp	.-12     	; 0x64 <__SREG__+0x25>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
